name: 'html-reporter-github-pages'
description: 'GitHub Pages HTML Test Results History - Static Website'
author: 'Pavan Mudigonda'
branding:
  icon: 'layout'
  color: 'green'
inputs:
  token:
    description: 'default Github token'
    required: false
    default: ${{ github.token }}
  test_results:
    description: 'test result data dir. If its Allure Results Provide RAW Results to generate Allure Report'
    default: 'test-results'
    required: false
  gh_pages:
    description: 'Folder with gh-pages branch'
    required: false
    default: 'gh-pages'
  results_history:
    description: 'Folder for results history'
    required: false
    default: 'results-history'
  tool_name:
    description: 'Folder for results history'
    required: false
    default: ''  
  workflow_name:
    description: 'Folder for results history'
    required: false
    default: '${{ github.workflow }}'
  env:
    description: 'Environment'
    required: false
  subfolder:
    description: 'subfolder'
    required: false
    default: 'docs'
  keep_reports:
    description: 'Keep X last reports'
    required: false
    default: '20'
  github_run_num:
    description: 'GitHub Actions build number'
    required: false
    default: ${{ github.run_number }}
  github_run_id:
    description: 'GitHub Actions run id'
    required: false
    default: ${{ github.run_id }}
  github_repo:
    description: 'GitHub repository'
    required: false
    default: ${{ github.repository }}
  report_url:
    description: 'Use a custom URL instead of *.github.io'
    required: false
    default: '' 
  external_repository:
    description: 'External GitHub repository'
    required: false 
  order:
    description: 'Order of Folders, ascending or descending'
    required: false
    default: 'descending'
  allure_report_generate_flag:
    description: 'To Generate Allure Report using this Action'
    required: false
    default: 'false'
  use_actions_summary:
    description: 'To write outputs to actions summary'
    required: false
    default: 'true'
outputs:
  url:
    description: 'GH Page URL'
    value: ${{ steps.gh_page.outputs.GITHUB_PAGES_WEBSITE_URL }}
  latest_result_url:
    description: 'Latest Test Result GH Pages URL'
    value: ${{ steps.gh_page.outputs.LATEST_RUN_GH_PAGES_URL }}

runs:
  using: 'composite'    
  steps:
    - name: checkout action
      uses: actions/checkout@v5.0.0
      
    - name: Install GH CLI
      uses: sersoft-gmbh/setup-gh-cli-action@v2.0.1
      with:
        version: stable

    - name: Java Install for Allure
      if: ${{ inputs.allure_report_generate_flag == 'true' && env.JAVA_PRESENT == 'false'}}
      uses: actions/setup-java@v4.2.1
      with:
        distribution: 'corretto'
        java-version: '17'

    - name: Create a new gh pages branch if it doesn't exist - same repo
      if: ${{ inputs.external_repository == '' }}
      shell: bash
      env:
        GIT_USER_EMAIL: actions@github.com
        GIT_USER_NAME: GitHub Actions
      run: |
        set -e
        CURRENT_BRANCH=$(git branch --show-current)
        STASHED=false
        if [[ -n $(git status -s) ]]; then
          git stash push --keep-index --include-untracked || true
          STASHED=true
        fi;

        # Remember the current branch
        mkdir -p gh_pages
        cd gh_pages

        # Check if the remote branch exists
        if git ls-remote --exit-code --heads "https://github.com/${{ github.repository }}.git" "gh_pages"; then
          echo "REMOTE BRANCH EXISTS"
        else
          git config --local user.email "$GIT_USER_EMAIL"
          git config --local user.name "$GIT_USER_NAME"
          git switch --orphan gh_pages
          git add .
          git commit --allow-empty -m "Initial commit on orphan branch"
          git config --global pull.rebase true
          git push -u origin gh_pages
        fi;

        # Restore the stash if there was one
        if [[ "$STASHED" == true ]]; then
          if git stash list | grep -q "WIP"; then
            git stash pop || true
          else
            echo "No stash entries found."
          fi
        fi;

    - name: delete github pages folder if its present
      shell: bash
      run: |
        # Check if the folder exists
        if [ -d "${{ inputs.gh_pages }}" ]; then
          echo "Folder exists. Deleting..."
          rm -rf "${{ inputs.gh_pages }}"
          echo "Folder deleted."
        else
          echo "Folder does not exist."
        fi;
        
    - name: Get test results history
      if: ${{ inputs.external_repository == '' }}
      uses: actions/checkout@v4.1.6
      continue-on-error: true
      with:
        ref: ${{ inputs.gh_pages }}
        path: ${{ inputs.gh_pages }}

    - id: external-repo
      shell: bash
      if: ${{ inputs.external_repository != '' }} 
      env:
        GH_TOKEN: ${{ inputs.token }}
      run: |
        if [[ -z "${{ inputs.gh_pages }}" ]]
        then
          if [[ "${{ inputs.external_repository }}" != "${{ github.repository }}" ]]
          then
            USING="main"
          else
            USING="$(gh api /repos/${{ inputs.external_repository }}/commits/${{ github.sha }}/branches-where-head --jq '.[0].name')"
          fi
          echo "::notice::Checkout: ${{ inputs.external_repository }} using ${USING}"
          echo "ref-exists=true" >> $GITHUB_ENV
        else
          if git ls-remote --heads --quiet --exit-code "https://${{ inputs.token }}@github.com/${{ inputs.external_repository }}.git" ${{ inputs.gh_pages }}
          then
            echo "::notice::Checkout: ${{ inputs.external_repository }} using ${{ inputs.gh_pages }}"
            echo "ref-exists=true" >> $GITHUB_ENV
          else
            USING="$(gh api /repos/${{ inputs.external_repository }} --jq '.default_branch')"
            echo "::notice::Checkout: ${{ inputs.external_repository }} does not have ref ${{ inputs.gh_pages }} (fallback to ${USING})"
            echo "ref-exists=false" >> $GITHUB_ENV
            echo "default-branch=${USING}" >> $GITHUB_ENV
          fi
        fi

    - if: ${{ ( steps.external-repo.outputs.ref-exists == 'true' ) && ( inputs.external_repository != '' ) }}
      uses: actions/checkout@v5.0.0
      with:
        path: ${{ inputs.gh_pages }}
        repository: ${{ inputs.external_repository }}
        ref: ${{ inputs.ref }}
        token: ${{ inputs.token }}

    - if: ${{ ( steps.external-repo.outputs.ref-exists == 'false' ) && ( inputs.external_repository != '' ) }}
      uses: actions/checkout@v5.0.0
      with:
        path: ${{ inputs.gh_pages }}
        repository: ${{ inputs.external_repository }}
        ref: ${{ steps.external-repo.outputs.default-branch }}
        token: ${{ inputs.token }}

    - name: Create a new gh pages branch if it doesn't exist - external repo
      shell: bash
      if: ${{ ( inputs.external_repository != '' ) && ( steps.external-repo.outputs.ref-exists == 'false' ) }}
      env:
        GIT_USER_EMAIL: "actions@github.com"
        GIT_USER_NAME: "GitHub Actions"        
      run: |
        echo "Creating new gh-pages branch for external repo"
        mkdir -p "${{ inputs.gh_pages }}"
        cd "${{ inputs.gh_pages }}"
        git config --local user.email $GIT_USER_EMAIL
        git config --local user.name $GIT_USER_NAME
        git switch --orphan ${{ inputs.gh_pages }}
        git add .
        git commit --allow-empty -m "Initial commit on orphan branch"
        git config --global pull.rebase true
        git push -u origin ${{ inputs.gh_pages }}

    - name: Create Test Results History GitHub Actions Run ID wise
      id: gh_page
      shell: bash
      env: 
        ALLURE_FLAG: "${{ inputs.allure_report_generate_flag }}"      
        ENV: "${{ inputs.env }}"
        TOKEN: "${{ inputs.token }}"
        GH_PAGES: "${{ inputs.gh_pages }}"
        SUBFOLDER: "${{ inputs.subfolder }}"
        KEEP_REPORTS: "${{ inputs.keep_reports }}"
        GITHUB_RUN_ID: "${{ inputs.github_run_id }}"
        REPO: "${{ inputs.github_repo }}"
        GITHUB_REPOSITORY: "${{ github.repository }}"
        REPORT_URL: "${{ inputs.report_url }}"
        EXTERNAL_REPO: "${{ inputs.external_repository }}"
        RUNNER_OS: "${{ runner.os }}"
        GITHUB_RUN_NUM: "${{ inputs.github_run_num }}"
        TOOL_NAME: "${{ inputs.tool_name }}"
        ORDER: "${{ inputs.oder }}"
        GH_TOKEN: "${{ github.token }}"
      run: |
        export GH_PAGES_ACTION_HOME=$PWD
        export ENV="${{ inputs.env }}"
        export TOKEN="${{ inputs.token }}"
        export TEST_RESULTS="${{ inputs.test_results }}"
        export GH_PAGES="${{ inputs.gh_pages }}"
        export SUBFOLDER="${{ inputs.subfolder }}"
        export KEEP_REPORTS="${{ inputs.keep_reports }}"
        export GITHUB_RUN_ID="${{ inputs.github_run_id }}"
        export REPO="${{ inputs.github_repo }}"
        export REPORT_URL="${{ inputs.report_url }}"
        export EXTERNAL_REPO="${{ inputs.external_repository }}"
        export RUNNER_OS="${{ runner.os }}"
        export GITHUB_RUN_NUM="${{ inputs.github_run_num }}"
        export TOOL_NAME="${{ inputs.tool_name }}"
        export WORKFLOW_NAME="${{ inputs.workflow_name }}"
        export ORDER="${{ inputs.order }}"
        export USE_ACTIONS_SUMMARY="${{ inputs.use_actions_summary }}"
        export GITHUB_WORKSPACE="${{ env.GITHUB_WORKSPACE }}"
        export WORKFLOW_NAME=$(echo "${{ inputs.workflow_name }}" | tr " " "-")
        #--------------------------------------------------------
        cd "${GH_PAGES}"
        if [[ "${SUBFOLDER}" != "" ]]; then
          mkdir -p "${SUBFOLDER}"
        fi;
        cd "${GH_PAGES_ACTION_HOME}"
        # Set variables
        if [[ ${{ env.ALLURE_FLAG }} == true || ${{ env.ALLURE_FLAG }} == 'true' ]]; then
          ALLURE_REPORT="allure-report"
        fi;
        #-------------------------------------------------------------------
        if [[ ${ORDER} != 'ascending' ]]; then
          INDEX_SCRIPT_PATH=${{ github.action_path }}/scripts/index-html-generator.py
        elif [[ ${ORDER} == 'descending' ]]; then
          INDEX_SCRIPT_PATH=${{ github.action_path }}/scripts/index-html-generator-descending-order.py
        fi;
        #-------------------------------------------------------------------
        # Check if its external repo push
        if [[ ${EXTERNAL_REPO} != '' ]]; then
          REPOSITORY_OWNER_SLASH_NAME=${EXTERNAL_REPO}
        elif [[ ${EXTERNAL_REPO} == '' ]]; then
          REPOSITORY_OWNER_SLASH_NAME=${GITHUB_REPOSITORY}
        fi;
        #-------------------------------------------------------------------
        delete_folders_func () {
          COUNT=$( ( ls | wc -l ) )
          echo "count folders in results-history: ${COUNT}"
          echo "keep reports count ${KEEP_REPORTS}"
          KEEP_REPORTS=$((KEEP_REPORTS+1))
          echo "if ${COUNT} > ${KEEP_REPORTS}"
          if (( COUNT > KEEP_REPORTS )); then
            echo "remove old reports"
            ls | sort -n | head -n -$((${KEEP_REPORTS}-2)) | xargs rm -rv;
            if [ -f index.html ]; then
              echo "remove index.html"
              rm index.html -rv
            fi;
            if [ -d last-history ]; then
              echo "remove last-history folder"
              rm last-history -rv
            fi;            
          fi;
        }
        #-------------------------------------------------------------------
        EXTERNAL_REPO_OWNER_SLASH_NAME=${EXTERNAL_REPO}
        EXTERNAL_REPO_NAME=${EXTERNAL_REPO_OWNER_SLASH_NAME##*/}
        if [[ "${EXTERNAL_REPO_NAME}" == '' ]]; 
        then
          GH_PAGES_API="repos/${{ github.repository }}/pages"
        elif [[ "${EXTERNAL_REPO}" != '' ]]
        then
          GH_PAGES_API="repos/${EXTERNAL_REPO}/pages"
        fi
        gh api -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" ${GH_PAGES_API} > gh-pages.json || true
        REPORT_URL=${REPORT_URL}
        #-------------------------------------------------------------------
        if [[ ${REPORT_URL} != '' ]]; then
            REPORT_URL="${REPORT_URL}"
            echo "Replacing github pages url. NEW url ${REPORT_URL}"
        else
            REPORT_URL=$(gh api -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" ${GH_PAGES_API} --jq '.html_url' | tr -d '"' | xargs)
            REPORT_URL="${REPORT_URL%/}"
            echo $REPORT_URL
            echo REPORT_URL=$REPORT_URL >> $GITHUB_ENV
            if [[ "${USE_ACTIONS_SUMMARY}" != 'false' || "${USE_ACTIONS_SUMMARY}" != false ]]; then
              echo "#### GitHub Pages HTML Reports" >> $GITHUB_STEP_SUMMARY
            fi;
            echo "REPORT_URL=${REPORT_URL}" >> $GITHUB_OUTPUT        
        fi;
        #-------------------------------------------------------------------
        # Save original GH_PAGES value before it gets modified
        GH_PAGES_BASE="${GH_PAGES}"
        # Identify where the current report should be copied to
        if [[ "${SUBFOLDER}" != "" ]]; then
          GH_PAGES="${GH_PAGES}/${SUBFOLDER}"
          mkdir -p "${GH_PAGES}"
        fi;
        if [[ "${TOOL_NAME}" != "" ]]; then
            GH_PAGES="${GH_PAGES}/${TOOL_NAME}"
            if [[ "${SUBFOLDER}" != "" ]]; then
                GITHUB_PAGES_WEBSITE_URL="${REPORT_URL}/${SUBFOLDER}/${TOOL_NAME}"
            else
                GITHUB_PAGES_WEBSITE_URL="${REPORT_URL}/${TOOL_NAME}"
            fi
            mkdir -p ${GH_PAGES}
        else
            if [[ "${SUBFOLDER}" != "" ]]; then
                GITHUB_PAGES_WEBSITE_URL="${REPORT_URL}/${SUBFOLDER}"
            else
                GITHUB_PAGES_WEBSITE_URL="${REPORT_URL}"
            fi
        fi;
        if [[ "${WORKFLOW_NAME}" != "" ]]; then
            GH_PAGES="${GH_PAGES}/${WORKFLOW_NAME}"
            GITHUB_PAGES_WEBSITE_URL="${GITHUB_PAGES_WEBSITE_URL}/${WORKFLOW_NAME}"
            mkdir -p "${GH_PAGES}"
        fi;
        if [[ "${ENV}" != "" ]]; then
            GH_PAGES="${GH_PAGES}/${ENV}"
            GITHUB_PAGES_WEBSITE_URL="${GITHUB_PAGES_WEBSITE_URL}/${ENV}"
            mkdir -p "${GH_PAGES}"
        fi;
        #-------------------------------------------------------------------        
        create_executor_json_func () {
          if [ ! -f ${TEST_RESULTS}/executor.json ]; then
            #echo "executor.json"
            echo '{"name":"GitHub Actions","type":"github","reportName":"Test Reporting",' > executor.json
            echo "\"url\":\"${GITHUB_PAGES_WEBSITE_URL}\"," >> executor.json # ???
            echo "\"reportUrl\":\"${GITHUB_PAGES_WEBSITE_URL}/${GITHUB_RUN_NUM}/\"," >> executor.json
            echo "\"buildUrl\":\"https://github.com/${{ github.repository }}/actions/runs/${GITHUB_RUN_ID}\"," >> executor.json
            echo "\"buildName\":\"GitHub Actions Run #${GITHUB_RUN_ID}\",\"buildOrder\":\"${GITHUB_RUN_NUM}\"}" >> executor.json        
            echo "\"buildName\":\"GitHub Actions Run #${GITHUB_RUN_NUM}\",\"buildOrder\":\"${GITHUB_RUN_NUM}\"}" >> executor.json

            mv ./executor.json ${TEST_RESULTS}  
          fi
          if [ ! -f ${TEST_RESULTS}/environment.properties ]; then
            {
             echo URL=${GITHUB_PAGES_WEBSITE_URL}
             echo BUILD_URL=${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
             echo GIT_BRANCH=${{ github.head_ref || github.ref_name }}
             echo GIT_COMMIT_ID=${{ github.sha }}
             echo GIT_COMMIT_MESSAGE=$(git show -s --format=%s HEAD)
             echo GIT_COMMIT_AUTHOR_NAME=$(git show -s --format='%ae' HEAD)
             echo GIT_COMMIT_TIME=$(git show -s --format=%ci HEAD)
            } >> environment.properties

            mv ./environment.properties ${TEST_RESULTS}
          fi 
        }
        #-------------------------------------------------------------------
        copy_current_results_func () {
          mkdir -p "./${GH_PAGES}/${GITHUB_RUN_NUM}"
          # If we are not dealing with Allure Reports then copy the test results
          if [[ ${{ env.ALLURE_FLAG }} == false || ${{ env.ALLURE_FLAG }} == 'false' || ${{ env.ALLURE_FLAG }} == '' ]]; then
            cp -r "${GH_PAGES_ACTION_HOME}/${TEST_RESULTS}"/. "./${GH_PAGES}/${GITHUB_RUN_NUM}"
          fi;
        }
        #-------------------------------------------------------------------
        generate_index_html_func () {
          python3 "${INDEX_SCRIPT_PATH}"
          echo "Completed index html generation"
        }
        #-------------------------------------------------------------------
        echo "current path: $PWD"
        mkdir -p "./${GH_PAGES}"
        mkdir -p "${GH_PAGES_ACTION_HOME}/${TEST_RESULTS}"
        echo "NEW results history folder ${GH_PAGES}"
        echo "New GH_PAGES folder: ${GH_PAGES}"
        echo "NEW github pages url ${GITHUB_PAGES_WEBSITE_URL}"       
        echo "GH_PAGES=${GH_PAGES}" >> $GITHUB_ENV
        echo "GITHUB_PAGES_WEBSITE_URL=${GITHUB_PAGES_WEBSITE_URL}" >> $GITHUB_ENV
        echo "GITHUB_PAGES_WEBSITE_URL=${GITHUB_PAGES_WEBSITE_URL}" >> $GITHUB_OUTPUT
        #-------------------------------------------------------------------
        echo "LATEST_RUN_GH_PAGES_URL=${GITHUB_PAGES_WEBSITE_URL}/${{ github.run_number }}/index.html" >> $GITHUB_OUTPUT
        # Publish Job Summary
        if [[ "${USE_ACTIONS_SUMMARY}" != 'false' || "${USE_ACTIONS_SUMMARY}" != false ]]; then
          echo "GH Pages History URL: ${REPORT_URL}" >> $GITHUB_STEP_SUMMARY
          echo "GH Pages Latest Result URL: ${GITHUB_PAGES_WEBSITE_URL}/${{ github.run_number }}/index.html" >> $GITHUB_STEP_SUMMARY
        fi;
        #-------------------------------------------------------------------
        # First Run Delete Function
        cd "./${GH_PAGES}"
        delete_folders_func
        cd "$GH_PAGES_ACTION_HOME"
        #-------------------------------------------------------------------
        # Copy current test-results for staging
        copy_current_results_func
        #-------------------------------------------------------------------   
        # Generate Final FOLDER STRUCTURE at lowest level
        cd "./${GH_PAGES}"
        generate_index_html_func
        cd "$GH_PAGES_ACTION_HOME"
        #-------------------------------------------------------------------   
        if [[ ${SUBFOLDER} == "" ]]; then
          cd "${GH_PAGES_ACTION_HOME}/${GH_PAGES_BASE}"
          generate_index_html_func
          cd "$GH_PAGES_ACTION_HOME"
        fi;
        if [[ ${SUBFOLDER} != "" ]]; then
            cd "${GH_PAGES_ACTION_HOME}/${GH_PAGES_BASE}/${SUBFOLDER}"
            generate_index_html_func
            cd "$GH_PAGES_ACTION_HOME"
            if [[ ${TOOL_NAME} != "" ]]; then
                cd "${GH_PAGES_ACTION_HOME}/${GH_PAGES_BASE}/${SUBFOLDER}/${TOOL_NAME}"
                generate_index_html_func
                cd "$GH_PAGES_ACTION_HOME"
            fi;
            if [[ ${TOOL_NAME} != "" && ${WORKFLOW_NAME} != "" ]]; then
                cd "${GH_PAGES_ACTION_HOME}/${GH_PAGES_BASE}/${SUBFOLDER}/${TOOL_NAME}/${WORKFLOW_NAME}"
                generate_index_html_func
                cd "$GH_PAGES_ACTION_HOME"
            fi;
            if [[ ${TOOL_NAME} != "" && ${WORKFLOW_NAME} != "" && ${ENV} != "" ]]; then
                cd "${GH_PAGES_ACTION_HOME}/${GH_PAGES_BASE}/${SUBFOLDER}/${TOOL_NAME}/${WORKFLOW_NAME}/${ENV}"
                generate_index_html_func
                cd "$GH_PAGES_ACTION_HOME"
            fi;          
        fi;
        if [[ ${SUBFOLDER} == "" ]]; then
            if [[ ${TOOL_NAME} != "" ]]; then
                cd "${GH_PAGES_ACTION_HOME}/${GH_PAGES_BASE}/${TOOL_NAME}"
                generate_index_html_func
                cd "$GH_PAGES_ACTION_HOME"
            fi;
            if [[ ${TOOL_NAME} != "" && ${WORKFLOW_NAME} != "" ]]; then
                cd "${GH_PAGES_ACTION_HOME}/${GH_PAGES_BASE}/${TOOL_NAME}/${WORKFLOW_NAME}"
                generate_index_html_func
                cd "$GH_PAGES_ACTION_HOME"
            fi;
            if [[ ${TOOL_NAME} != "" && ${WORKFLOW_NAME} != "" && ${ENV} != "" ]]; then
                cd "${GH_PAGES_ACTION_HOME}/${GH_PAGES_BASE}/${TOOL_NAME}/${WORKFLOW_NAME}/${ENV}"
                generate_index_html_func
                cd "$GH_PAGES_ACTION_HOME"
            fi;
        fi;
        #-------------------------------------------------------------------
        cd "$GH_PAGES_ACTION_HOME"
        # Manage History and Last History Folders
        # Create History folder just in case if its not present.
        # For Allure Reports it would be present by default
        # For other reports it will not be present
        mkdir -p "./${GH_PAGES}/${GITHUB_RUN_NUM}/history"
        #-------------------------------------------------------------------
        cd "$GH_PAGES_ACTION_HOME"
        cd "./${GH_PAGES}"
        if [ -d last-history ]; then
           #Copy Last History from previous run in to Allure Results Folder for Allure Report Generation
           cp -r ./last-history/. "${GH_PAGES_ACTION_HOME}/${TEST_RESULTS}/history"
        fi;
        #--------------------------------------------------------------------
        # Allure Report Generation
        if [[ ${{ env.ALLURE_FLAG }} == true || ${{ env.ALLURE_FLAG }} == 'true' ]]; then
          cd "$GH_PAGES_ACTION_HOME"
          npm -g install allure-commandline
          npx allure --version
          # cd "${GH_PAGES_ACTION_HOME}/${TEST_RESULTS}"
          create_executor_json_func 
          npx allure generate ${TEST_RESULTS} -o allure-report --clean
          # finally copy allure report
          cp -r allure-report/. "${GH_PAGES}/${GITHUB_RUN_NUM}"
          # Create Last History Folder if its not present
          mkdir -p "./${GH_PAGES}/last-history"
          # Create History folder in Test Results just in case so next command copy won't fail
          mkdir -p "${GH_PAGES}/${GITHUB_RUN_NUM}/history"
          # Move files from Last History folder to History folder inside the most latest run that is currently being run right now
          # This is to show up history and retires information under Allure Reports
          if [ -d "./${GH_PAGES}/last-history" ]; then
            cp -r ./allure-report/history/. "./${GH_PAGES}/last-history"
          else
            mkdir "./${GH_PAGES}/last-history"
            cp -r ./allure-report/history/. "./${GH_PAGES}/last-history"
          fi;
        fi;
        #--------------------------------------------------------------------

    - name: Deploy report to Github Pages
      if: ${{ inputs.external_repository == '' && inputs.subfolder == '' }}
      uses: peaceiris/actions-gh-pages@v4.0.0
      with:
        github_token: ${{ inputs.token }}
        force_orphan: false
        publish_branch: ${{ inputs.gh_pages }}
        keep_files: false
        publish_dir: ${{ inputs.gh_pages }}
        allow_empty_commit: true

    - name: Deploy report to Github Pages
      if: ${{ inputs.external_repository != '' && inputs.subfolder == '' }}
      uses: peaceiris/actions-gh-pages@v4.0.0
      with:
        personal_token: ${{ inputs.token }}
        publish_branch: ${{ inputs.gh_pages }}
        force_orphan: false
        external_repository: ${{ inputs.external_repository }}
        keep_files: false
        publish_dir: ${{ inputs.gh_pages }}
        allow_empty_commit: true

    - name: Deploy report to Github Pages
      if: ${{ inputs.external_repository == '' && inputs.subfolder != '' }}
      uses: peaceiris/actions-gh-pages@v4.0.0
      with:
        github_token: ${{ inputs.token }}
        publish_branch: ${{ inputs.gh_pages }}
        force_orphan: false
        publish_dir: ${{ inputs.gh_pages }}/${{ inputs.subfolder }}
        keep_files: false
        destination_dir: ${{ inputs.subfolder }}
        allow_empty_commit: true

    - name: Deploy report to Github Pages
      if: ${{ inputs.external_repository != '' && inputs.subfolder != '' }}
      uses: peaceiris/actions-gh-pages@v4.0.0
      with:
        personal_token: ${{ inputs.token }}
        publish_branch: ${{ inputs.gh_pages }}
        force_orphan: false
        publish_dir: ${{ inputs.gh_pages }}/${{ inputs.subfolder }}
        external_repository: ${{ inputs.external_repository }}
        keep_files: false
        destination_dir: ${{ inputs.subfolder }}
        allow_empty_commit: true

    - name: generate github pages site - same repo
      if: ${{ ( inputs.external_repository == '' ) && ( inputs.subfolder == '' ) }}
      shell: bash
      env: 
        GH_TOKEN: ${{ inputs.token }}
      run: |
        #----------------------------------------------------------
        # FINALLY DO THE GH PAGES SITE CREATION
        #----------------------------------------------------------
        set -e
        echo "calling gh api to list pages"
        gh api \
          -H "Accept: application/vnd.github+json" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          repos/${{ github.repository }}/pages --silent > gh-pages.txt || true;
        echo "calling gh api to list pages"
        GH_SITE_MESSAGE=$(cat gh-pages.txt | xargs)
        if echo "${GH_SITE_MESSAGE}" | grep -q 'gh: Not Found (HTTP 404)'; then
          gh api \
            --method POST \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            /repos/${{ github.repository }}/pages \
             -f "source[branch]=${{ inputs.gh_pages }}" -f "source[path]=/" --silent > gh-pages-site.json || true;
          GH_SITE_CREATION_MESSAGE=$(cat gh-pages-site.json | xargs)
          if echo "${GH_SITE_CREATION_MESSAGE}" | grep -q 'gh: Not Found (HTTP 404)'; then
            echo "Permissions are missing for GITHUB_TOKEN to create GitHub Pages site automatically ! Please create manually by going to Settings -> Pages and select branch and folder to deploy from"
          fi;
          gh api \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \   
            repos/${{ github.repository }}/pages --silent > gh-pages.json || true;
          REPORT_URL=$(gh api -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" repos/${{ github.repository }}/pages --jq '.html_url' 2>/dev/null | xargs)
          REPORT_URL="${REPORT_URL%/}"
          echo "Your GitHub Pages URL: $REPORT_URL"
        else
          echo "site already present"
          echo "updating gh page info"
          gh api \
            --method PUT \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            /repos/${{ github.repository }}/pages \
             -f "source[branch]=${{ inputs.gh_pages }}" -f "source[path]=/" --silent > gh-pages-site.json || true;
          GH_SITE_CREATION_MESSAGE=$(cat gh-pages-site.json | xargs)
          if echo "${GH_SITE_CREATION_MESSAGE}" | grep -q 'gh: Not Found (HTTP 404)'; then
            echo "Permissions are missing for GITHUB_TOKEN to create GitHub Pages site automatically ! Please create manually by going to Settings -> Pages and select branch and folder to deploy from"
          fi;             
          gh api \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \   
            repos/${{ github.repository }}/pages --silent > gh-pages.json || true;

          REPORT_URL=$(gh api -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" repos/${{ github.repository }}/pages --jq '.html_url' 2>/dev/null | xargs)
          REPORT_URL="${REPORT_URL%/}"
          echo "Your GitHub Pages URL: $REPORT_URL"
        fi;

    - name: generate github pages site - different repo
      shell: bash
      if: ${{ ( inputs.external_repository != '' ) && ( inputs.subfolder == '' ) }}
      env: 
        GH_TOKEN: ${{ inputs.token }}
      run: |
        #-----------------------------------------------------------------------------------------------------------------------------------------------------
        # FINALLY DO THE GH PAGES SITE CREATION
        #-----------------------------------------------------------------------------------------------------------------------------------------------------
        set -e
        gh api \
          -H "Accept: application/vnd.github+json" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          /repos/${{ inputs.external_repository }}/pages --silent > gh-pages.txt || true;
        GH_SITE_MESSAGE=$(cat gh-pages.txt | xargs)
        if echo "${GH_SITE_MESSAGE}" | grep -q 'gh: Not Found (HTTP 404)'; then
          gh api \
            --method POST \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            /repos/${{ inputs.external_repository }}/pages \
             -f "source[branch]=${{ inputs.gh_pages }}" -f "source[path]=/" --silent > gh-pages-site.json || true;
          GH_SITE_CREATION_MESSAGE=$(cat gh-pages-site.json | xargs)
          if echo "${GH_SITE_CREATION_MESSAGE}" | grep -q 'gh: Not Found (HTTP 404)'; then
            echo "Permissions are missing for GITHUB_TOKEN to create GitHub Pages site automatically ! Please create manually by going to Settings -> Pages and select branch and folder to deploy from"
          fi;             
          gh api \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \    
            repos/${{ inputs.external_repository }}/pages --silent > gh-pages.json || true ; 
          REPORT_URL=$(gh api -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" repos/${{ inputs.external_repository }}/pages --jq '.html_url' 2>/dev/null | xargs)
          REPORT_URL="${REPORT_URL%/}"
          echo "Your GitHub Pages URL: $REPORT_URL"
        else
          echo "site already present"
          echo "updating gh page info"
          gh api \
            --method PUT \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            /repos/${{ inputs.external_repository }}/pages \
             -f "source[branch]=${{ inputs.gh_pages }}" -f "source[path]=/" --silent > gh-pages-site.json || true;
          GH_SITE_CREATION_MESSAGE=$(cat gh-pages-site.json | xargs)
          if echo "${GH_SITE_CREATION_MESSAGE}" | grep -q 'gh: Not Found (HTTP 404)'; then
            echo "Permissions are missing for GITHUB_TOKEN to create GitHub Pages site automatically ! Please create manually by going to Settings -> Pages and select branch and folder to deploy from"
          fi;             
          gh api \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \    
            repos/${{ inputs.external_repository }}/pages --silent > gh-pages.json || true ;
          REPORT_URL=$(gh api -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" repos/${{ inputs.external_repository }}/pages --jq '.html_url' 2>/dev/null | xargs)
          REPORT_URL="${REPORT_URL%/}"
          echo "Your GitHub Pages URL: $REPORT_URL"
        fi;

    - name: generate github pages site - same repo
      if: ${{ ( inputs.external_repository == '' ) && ( inputs.subfolder != '' ) }}
      shell: bash
      env: 
        GH_TOKEN: ${{ inputs.token }}
      run: |
        #----------------------------------------------------------
        # FINALLY DO THE GH PAGES SITE CREATION
        #----------------------------------------------------------
        set -e
        gh api \
          -H "Accept: application/vnd.github+json" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          repos/${{ github.repository }}/pages --silent > gh-pages.txt || true;
        GH_SITE_MESSAGE=$(cat gh-pages.txt | xargs)
        if echo "${GH_SITE_MESSAGE}" | grep -q 'gh: Not Found (HTTP 404)'; then
          gh api \
            --method POST \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            /repos/${{ github.repository }}/pages \
             -f "source[branch]=${{ inputs.gh_pages }}" -f "source[path]=/${{ inputs.subfolder }}" --silent > gh-pages-site.json || true;
          GH_SITE_CREATION_MESSAGE=$(cat gh-pages-site.json | xargs)
          if echo "${GH_SITE_CREATION_MESSAGE}" | grep -q 'gh: Not Found (HTTP 404)'; then
            echo "Permissions are missing for GITHUB_TOKEN to create GitHub Pages site automatically ! Please create manually by going to Settings -> Pages and select branch and folder to deploy from"
          fi;             
          gh api \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            repos/${{ github.repository }}/pages --silent > gh-pages.json || true;
          REPORT_URL=$(gh api -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" repos/${{ github.repository }}/pages --jq '.html_url' 2>/dev/null | xargs)
          REPORT_URL="${REPORT_URL%/}"
          echo "Your GitHub Pages URL: $REPORT_URL"
        else
          echo "site already present"
          echo "updating gh page info";
          gh api \
            --method PUT \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            /repos/${{ github.repository }}/pages \
             -f "source[branch]=${{ inputs.gh_pages }}" -f "source[path]=/${{ inputs.subfolder }}" --silent > gh-pages-site.json || true;
          GH_SITE_CREATION_MESSAGE=$(cat gh-pages-site.json | xargs)
          if echo "${GH_SITE_CREATION_MESSAGE}" | grep -q 'gh: Not Found (HTTP 404)'; then
            echo "Permissions are missing for GITHUB_TOKEN to create GitHub Pages site automatically ! Please create manually by going to Settings -> Pages and select branch and folder to deploy from"
          fi;             
          gh api \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            repos/${{ github.repository }}/pages --silent > gh-pages.json || true ;
          REPORT_URL=$(gh api -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" repos/${{ github.repository }}/pages --jq '.html_url' 2>/dev/null | xargs)
          REPORT_URL="${REPORT_URL%/}"
          echo "Your GitHub Pages URL: $REPORT_URL"
        fi;

    - name: generate github pages site - different repo
      shell: bash
      if: ${{ ( inputs.external_repository != '' ) && ( inputs.subfolder != '' ) }}
      env: 
        GH_TOKEN: ${{ inputs.token }}
      run: |
        #-----------------------------------------------------------------------------------------------------------------------------------------------------
        # FINALLY DO THE GH PAGES SITE CREATION
        #-----------------------------------------------------------------------------------------------------------------------------------------------------
        set -e
        gh api \
          -H "Accept: application/vnd.github+json" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          /repos/${{ inputs.external_repository }}/pages --silent > gh-pages.txt || true;
        GH_SITE_MESSAGE=$(cat gh-pages.txt | xargs)
        if echo "${GH_SITE_MESSAGE}" | grep -q 'gh: Not Found (HTTP 404)'; then
          gh api \
            --method POST \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            /repos/${{ inputs.external_repository }}/pages \
             -f "source[branch]=${{ inputs.gh_pages }}" -f "source[path]=/${{ inputs.subfolder }}" --silent > gh-pages-site.json || true;
          GH_SITE_CREATION_MESSAGE=$(cat gh-pages-site.json | xargs)
          if echo "${GH_SITE_CREATION_MESSAGE}" | grep -q 'gh: Not Found (HTTP 404)'; then
            echo "Permissions are missing for GITHUB_TOKEN to create GitHub Pages site automatically ! Please create manually by going to Settings -> Pages and select branch and folder to deploy from"
          fi;             
          gh api \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \    
            repos/${{ inputs.external_repository }}/pages --silent > gh-pages.json || true ;
          REPORT_URL=$(gh api -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" repos/${{ inputs.external_repository }}/pages --jq '.html_url' 2>/dev/null | xargs)
          REPORT_URL="${REPORT_URL%/}"
          echo "Your GitHub Pages URL: $REPORT_URL"
        else
          echo "site already present"
          echo "updating gh page info"
          gh api \
            --method PUT \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            /repos/${{ inputs.external_repository }}/pages \
             -f "source[branch]=${{ inputs.gh_pages }}" -f "source[path]=/${{ inputs.subfolder }}" --silent > gh-pages-site.json || true;
          GH_SITE_CREATION_MESSAGE=$(cat gh-pages-site.json | xargs)
          if echo "${GH_SITE_CREATION_MESSAGE}" | grep -q 'gh: Not Found (HTTP 404)'; then
            echo "Permissions are missing for GITHUB_TOKEN to create GitHub Pages site automatically ! Please create manually by going to Settings -> Pages and select branch and folder to deploy from"
          fi;             
          gh api \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \    
            repos/${{ inputs.external_repository }}/pages --silent > gh-pages.json || true ;
          REPORT_URL=$(gh api -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" repos/${{ inputs.external_repository }}/pages --jq '.html_url' 2>/dev/null | xargs)
          REPORT_URL="${REPORT_URL%/}"
          echo "Your GitHub Pages URL: $REPORT_URL"
        fi;
